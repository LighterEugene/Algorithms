import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.PublicKey;

//Примеры применения хеш-функций в реальной жизни:
//Проверка целостности данных:
//
//Хеш-функции используются для проверки того, что данные не были изменены.
// Например, при скачивании файлов часто предоставляют хеш (например, MD5 или SHA-256),
// чтобы проверить, что файл загружен правильно и не был изменён.
//Хранение паролей:
//
//В системах безопасности пароли никогда не хранятся в явном виде.
// Вместо этого хеш-функция вычисляет хеш пароля, и он сохраняется.
// При проверке пароля пользователь вводит свой пароль, и система сравнивает хеши.
//Цифровые подписи и аутентификация:
//
//В цифровых подписях хеш-функции используются для создания уникальной подписи документа.
// Подпись создаётся на основе хеша документа и закрытого ключа,
// что позволяет подтвердить подлинность документа и его неизменность.
//Распределение данных в хэш-таблицах:
//
//Хеш-функции применяются в структурах данных, таких как хэш-таблицы или хэш-карты (HashMap).
// Они используют хеширование для быстрого поиска, добавления и удаления элементов.
//Блокчейн и криптовалюты (например, Bitcoin):
//
//В технологии блокчейн каждая транзакция и блок данных хэшируются,
// что гарантирует неизменность информации. Хеш-функции обеспечивают целостность блоков,
// а в Bitcoin они используются в процессе майнинга для создания новых блоков.


public class RSAGeneration {
    public static void main(String[] args) {
        try {
            // Генерация пары ключей RSA
            KeyPairGenerator keyGen = KeyPairGenerator.getInstance("RSA");
            keyGen.initialize(2048); // Устанавливаем размер ключа (2048 бит)
            KeyPair pair = keyGen.generateKeyPair();

            // Получаем публичный ключ
            PublicKey publicKey = pair.getPublic();

            // Печатаем публичный ключ в открытом виде (в кодировке Base64)
            System.out.println("Публичный ключ RSA: " + java.util.Base64.getEncoder().encodeToString(publicKey.getEncoded()));
        } catch (NoSuchAlgorithmException e) {
            System.out.println("Ошибка при генерации ключа: " + e.getMessage());
        }
    }
}
